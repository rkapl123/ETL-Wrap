log4perl.rootLogger = INFO, LOGFILE, SCREEN, MAIL
#log4perl.logger.ETL.Wrap = DEBUG
#log4perl.logger.ETL.Wrap.DB = TRACE
#log4perl.logger.ETL.Wrap.FTP = TRACE
#log4perl.logger.ETL.Wrap.File = TRACE
#log4perl.logger.ETL.Wrap.Common = TRACE

# custom conversion specifiers: username und path of the logfile (as a hyperlink)
log4perl.PatternLayout.cspec.U = sub { return $ENV{USERNAME};}
log4perl.PatternLayout.cspec.K = sub { return ETL::Wrap::Common::getLogFPathForMail(); }

# File appender config
log4perl.appender.LOGFILE = Log::Log4perl::Appender::File
log4perl.appender.LOGFILE.filename = sub { return ETL::Wrap::Common::getLogFPath(); }
log4perl.appender.LOGFILE.mode = append
log4perl.appender.LOGFILE.syswrite = 1
log4perl.appender.LOGFILE.layout = PatternLayout::Multiline
log4perl.appender.LOGFILE.layout.ConversionPattern = %d	%P	%p	%U/%H	%M-%L	%m\r\n

#/
# ----  layout.ConversionPattern description ----
#  %c Category of the logging event.
#  %C Fully qualified package (or class) name of the caller
#  %d Current date in yyyy/MM/dd hh:mm:ss format
#  %d{...} Current date in customized format (see below)
#  %F File where the logging event occurred
#  %H Hostname (if Sys::Hostname is available)
#  %K calls the sub defined in log4perl.PatternLayout.cspec.K (return path of logfile)
#  %l Fully qualified name of the calling method followed by the
#     callers source the file name and line number between 
#     parentheses.
#  %L Line number within the file where the log statement was issued
#  %m The message to be logged
#  %m{chomp} Log message, stripped off a trailing newline
#  %m{indent} Log message, multi-lines indented so they line up with first
#  %m{indent=n} Log message, multi-lines indented by n spaces
#  %M Method or function where the logging request was issued
#  %n Newline (OS-independent).. \r\n needs to be set in Windows environments for file appenders to produce correct newlines.
#  %p Priority of the logging event (%p{1} shows the first letter)
#  %P pid of the current process
#  %r Number of milliseconds elapsed from program start to logging 
#     event
#  %R Number of milliseconds elapsed from last logging event to
#     current logging event 
#  %T A stack trace of functions called
#  %U calls the sub defined in log4perl.PatternLayout.cspec.U (return username)
#  %x The topmost NDC (see below)
#  %X{key} The entry 'key' of the MDC (see below)
#  %% A literal percent (%) sign
# NDC and MDC are explained in "Nested Diagnostic Context (NDC)" in Log::Log4perl and "Mapped Diagnostic Context (MDC)" in Log::Log4perl.
# additional info: http://search.cpan.org/~mschilli/Log-Log4perl-1.49/lib/Log/Log4perl/Layout/PatternLayout.pm

# screen appender config
log4perl.appender.SCREEN = Log::Log4perl::Appender::ScreenColoredLevels
log4perl.appender.SCREEN.color.TRACE = magenta
log4perl.appender.SCREEN.color.DEBUG = cyan
log4perl.appender.SCREEN.color.WARN = blue on_white
log4perl.appender.SCREEN.color.ERROR = red on_white
log4perl.appender.SCREEN.color.FATAL = blink red on_white
log4perl.appender.SCREEN.stderr = 0
log4perl.appender.SCREEN.layout = PatternLayout
log4perl.appender.SCREEN.layout.ConversionPattern = %d	%P	%p	%U/%H	%M-%L	%m%n

#/
# Mail appender config
log4perl.filter.MailFilter = sub { return ETL::Wrap::Common::MailFilter(@_); }
log4perl.appender.MAIL = Log::Dispatch::Email::MIMELite
log4perl.appender.MAIL.name = MAIL
log4perl.appender.MAIL.buffered = 0
log4perl.appender.MAIL.Filter = MailFilter
log4perl.appender.MAIL.min_level = error
log4perl.appender.MAIL.from = test@pfadfinder-gablitz.at
log4perl.appender.MAIL.to = test@pfadfinder-gablitz.at
log4perl.appender.MAIL.subject = Fehler in LogCfgUtil
log4perl.appender.MAIL.layout = PatternLayout
log4perl.appender.MAIL.layout.ConversionPattern = %d{yyyy/MM/dd HH:mm:ss:SSS} 	%p	%c	%m %K%n

